import re

def calculator_decorator(func):
    def wrapper(expression):
        try:
            
            if "__" in expression or "exec" in expression or "eval" in expression:
                raise ValueError("üö´ –ù–µ–ø–æ–Ω—è—Ç–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ!")

            
            result = func(expression)

            
            print(f"üßÆ {expression} = {result}")
            return result

        except ZeroDivisionError:
            print("‚ùå –û—à–∏–±–∫–∞: –î–∏–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å!")
        except (SyntaxError, NameError, TypeError, ValueError) as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
        except Exception as e:
            print(f"üö® –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –û—à–∏–±–∫–∞: {e}")

    return wrapper

@calculator_decorator
def calculate(expression):
    return eval(expression)


calculate("10 + 5 * 2")   
calculate("10 / 0")       
calculate("abc + 5")      
calculate("__import__('os').system('rm -rf /')") 
