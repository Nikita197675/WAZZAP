import random
import logging
from functools import wraps

logging.basicConfig(filename="simulation.log", level=logging.INFO, format="%(asctime)s - %(message)s")

def log_simulation(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        logging.info(f"Started {func.__name__} with arguments {args[1:]}, result: {result}")
        return result
    return wrapper

def log_errors(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            error_message = f"Error in {func.__name__}: {e}"
            logging.error(error_message)
            print(f"‚ùå {error_message}")
    return wrapper

class Human:
    def __init__(self, name="Human", job=None, home=None, car=None):
        self.name = name
        self.money = 100
        self.gladness = 50
        self.satiety = 50
        self.job = job
        self.car = car
        self.home = home

    @log_errors
    def get_home(self):
        self.home = House()

    @log_errors
    def get_car(self):
        self.car = Auto(brands_of_car)

    @log_errors
    def get_job(self):
        if self.car.drive():
            self.job = Job(job_list)
        else:
            self.to_repair()

    @log_simulation
    @log_errors
    def eat(self):
        if self.home.food <= 0:
            self.shopping("food")
        else:
            if self.satiety >= 100:
                self.satiety = 100
                return
            self.satiety += 5
            self.home.food -= 5

    @log_simulation
    @log_errors
    def work(self):
        if self.car.drive():
            self.money += self.job.salary
            self.gladness -= self.job.gladness_less
            self.satiety -= 4
        else:
            if self.car.fuel < 20:
                self.shopping("fuel")
            else:
                self.to_repair()

    @log_simulation
    @log_errors
    def shopping(self, manage):
        if self.car.drive():
            pass
        else:
            if self.car.fuel < 20:
                manage = "fuel"
            else:
                self.to_repair()
                return
        if manage == "fuel":
            print("I bought fuel")
            self.money -= 100
            self.car.fuel += 100
        elif manage == "food":
            print("Bought food")
            self.money -= 50
            self.home.food += 50
        elif manage == "delicacies":
            print("Hooray! Delicious!")
            self.gladness += 10
            self.satiety += 2
            self.money -= 15

    @log_simulation
    @log_errors
    def chill(self):
        self.gladness += 10
        self.home.mess += 5

    @log_simulation
    @log_errors
    def clean_home(self):
        self.gladness -= 5
        self.home.mess = 0

    @log_simulation
    @log_errors
    def to_repair(self):
        self.car.strength += 100
        self.money -= 50

    @log_errors
    def is_alive(self):
        if self.gladness < 0:
            print("Depression...")
            return False
        if self.satiety < 0:
            print("Dead...")
            return False
        if self.money < -500:
            print("Bankrupt...")
            return False

    @log_simulation
    @log_errors
    def live(self, day):
        if self.is_alive() == False:
            return False
        if self.home is None:
            print("Settled in the house")
            self.get_home()
        if self.car is None:
            self.get_car()
            print(f"I bought a car {self.car.brand}")
        if self.job is None:
            self.get_job()
            print(f"I don't have a job, going to get a job {self.job.job} with salary {self.job.salary}")

        dice = random.randint(1, 4)
        if self.satiety < 20:
            print("I'll go eat")
            self.eat()
        elif self.gladness < 20:
            if self.home.mess > 15:
                print("I want to chill, but there is so much mess...\n So I will clean the house")
                self.clean_home()
            else:
                print("Let`s chill!")
                self.chill()
        elif self.money < 0:
            print("Start working")
            self.work()
        elif self.car.strength < 15:
            print("I need to repair my car")
            self.to_repair()
        elif dice == 1:
            print("Let`s chill!")
            self.chill()
        elif dice == 2:
            print("Start working")
            self.work()
        elif dice == 3:
            print("Cleaning time!")
            self.clean_home()
        elif dice == 4:
            print("Time for treats!")
            self.shopping(manage="delicacies")

class Auto:
    def __init__(self, brand_list):
        self.brand = random.choice(list(brand_list))
        self.fuel = brand_list[self.brand]["fuel"]
        self.strength = brand_list[self.brand]["strength"]
        self.consumption = brand_list[self.brand]["consumption"]

    @log_errors
    def drive(self):
        if self.strength > 0 and self.fuel >= self.consumption:
            self.fuel -= self.consumption
            self.strength -= 1
            return True
        else:
            print("The car cannot move")
            return False

class House:
    def __init__(self):
        self.mess = 0
        self.food = 0

job_list = {
"Java developer": {"salary": 50, "gladness_less": 10},
"Python developer": {"salary": 40, "gladness_less": 3},
"C++ developer": {"salary": 45, "gladness_less": 25},
"Rust developer": {"salary": 70, "gladness_less": 1},
}

brands_of_car = {
"BMW": {"fuel": 100, "strength": 100, "consumption": 6},
"Lada": {"fuel": 50, "strength": 40, "consumption": 10},
"Volvo": {"fuel": 70, "strength": 150, "consumption": 8},
"Ferrari": {"fuel": 80, "strength": 120, "consumption": 14},
}

class Job:
    def __init__(self, job_list):
        self.job = random.choice(list(job_list))
        self.salary = job_list[self.job]["salary"]
        self.gladness_less = job_list[self.job]["gladness_less"]

nick = Human(name="Nick")

for day in range(1, 8):
    if nick.live(day) == False:
        break
